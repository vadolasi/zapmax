generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

model Instance {
  id        String               @id
  createdAt DateTime             @default(now())
  session   Session[]
  active    Boolean              @default(false)
  chats     Chat[]
  phone     String?
  shadulers Scheduler_Instance[]
}

model Session {
  id         String
  instance   Instance @relation(fields: [instanceId], references: [id], onDelete: Cascade)
  instanceId String
  data       Bytes

  @@id([id, instanceId])
}

model Chat {
  name         String
  id           String
  instance     Instance @relation(fields: [instanceId], references: [id], onDelete: Cascade)
  instanceId   String
  participants Json     @default("[]") @db.Json

  @@id([id, instanceId])
}

model Scheduler_Instance {
  Instance    Instance?  @relation(fields: [instanceId], references: [id], onDelete: Cascade)
  instanceId  String
  Scheduler   Scheduler? @relation(fields: [schedulerId], references: [id], onDelete: Cascade)
  schedulerId String

  @@id([instanceId, schedulerId])
}

model Scheduler {
  id                         String               @id
  jid                        String
  createdAt                  DateTime             @default(now())
  instances                  Scheduler_Instance[]
  blockAdms                  Boolean              @default(true)
  active                     Boolean              @default(true)
  messages                   Json                 @db.Json
  minTimeBetweenParticipants Int
  maxTimeBetweenParticipants Int
  groupSize                  Int
  groupDelay                 Int
  minTimeTyping              Int
  maxTimeTyping              Int
  jobs                       Job[]
}

model Job {
  jid         String
  scheduler   Scheduler @relation(fields: [schedulerId], references: [id], onDelete: Cascade)
  schedulerId String
  sent        Boolean   @default(false)
  queueId     String

  @@id([jid, schedulerId])
}
